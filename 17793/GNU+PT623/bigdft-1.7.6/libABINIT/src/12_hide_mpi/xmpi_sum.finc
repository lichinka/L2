!{\src2tex{textfont=tt}}
!!****f* ABINIT/xmpi_sum_int
!! NAME
!!  xmpi_sum_int
!!
!! FUNCTION
!!  This module contains functions that calls MPI routine,
!!  if we compile the code using the MPI CPP flags.
!!  xmpi_sum is the generic function.
!!
!! COPYRIGHT
!!  Copyright (C) 2001-2014 ABINIT group (AR,XG,MB)
!!  This file is distributed under the terms of the
!!  GNU General Public License, see ~ABINIT/COPYING
!!  or http://www.gnu.org/copyleft/gpl.txt .
!!
!! NOTES
!!  MPI2 defines an option MPI_IN_PLACE to do the SUM in-place in the case of intra-communicators.
!!  The additional array xsum is therefore not needed if MPI_INPLACE is defined.
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_allreduce,xmpi_abort
!!
!! SOURCE

subroutine xmpi_sum_int(xval,comm,ier)


 use defs_basis
 use m_profiling

!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_sum_int'
!End of the abilint section

 implicit none

!Arguments ------------------------------------
 integer,intent(inout) :: xval(:)
 integer,intent(in) :: comm
 integer,intent(out)   :: ier

!Local variables-------------------------------
#if defined HAVE_MPI
 integer :: n1
 integer,allocatable :: xsum(:)
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
!  Accumulate xval on all proc. in comm
   n1 = size(xval)

#if defined HAVE_MPI2 && defined HAVE_MPI2_INPLACE
   call MPI_ALLREDUCE(MPI_IN_PLACE,xval,n1,MPI_INTEGER,MPI_SUM,comm,ier)
#else
   ABI_ALLOCATE(xsum,(n1))
   if (ABI_ALLOC_STAT/= 0) then
     call xmpi_abort(comm=comm, msg='error allocating xsum in xmpi_sum_int')
   end if
   call MPI_ALLREDUCE(xval,xsum,n1,MPI_INTEGER,MPI_SUM,comm,ier)
   xval (:) = xsum(:)
   ABI_DEALLOCATE(xsum)
#endif

 end if
#endif

end subroutine xmpi_sum_int
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_sum_intv
!! NAME
!!  xmpi_sum_intv
!!
!! FUNCTION
!!  Combines values from all processes and distribute
!!  the result back to all processes.
!!  Target: scalar integers.
!!
!! INPUTS
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_allreduce,xmpi_abort
!!
!! SOURCE
subroutine xmpi_sum_intv(xval,comm,ier)


 use defs_basis

!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_sum_intv'
!End of the abilint section

 implicit none

!Arguments----------------------
 integer,intent(inout) :: xval
 integer,intent(in) :: comm
 integer,intent(out)   :: ier

!Local variables----------------
#if defined HAVE_MPI
 integer :: xsum
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
!  Accumulate xval on all proc. in comm
   call MPI_ALLREDUCE(xval,xsum,1,MPI_INTEGER,MPI_SUM,comm,ier)
   xval = xsum
 end if
#endif
end subroutine xmpi_sum_intv
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_sum_intv2
!! NAME
!!  xmpi_sum_intv2
!!
!! FUNCTION
!!  Combines values from all processes and distribute
!!  the result back to all processes.
!!  Target: scalar integer without transfers.
!!
!! INPUTS
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!  xsum= receive buffer
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_allreduce,xmpi_abort
!!
!! SOURCE
subroutine xmpi_sum_intv2(xval,xsum,comm,ier)


 use defs_basis

!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_sum_intv2'
!End of the abilint section

 implicit none

!Arguments---------------------
 integer,intent(inout) :: xval,xsum
 integer,intent(in) :: comm
 integer,intent(out)   :: ier

!Local variables---------------

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
!  Accumulate xval on all proc. in comm
   call MPI_ALLREDUCE(xval,xsum,1,MPI_INTEGER,MPI_SUM,comm,ier)
 else
#endif
   xsum=xval
#if defined HAVE_MPI
 end if
#endif

end subroutine xmpi_sum_intv2
!!***

!!****f* ABINIT/xmpi_sum_intn
!! NAME
!!  xmpi_sum_intn
!!
!! FUNCTION
!!  Combines values from all processes and distribute
!!  the result back to all processes.
!!  Target: one-dimensional integer arrays.
!!
!! INPUTS
!!  n1= first dimension of the array
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_allreduce,xmpi_abort
!!
!! SOURCE
subroutine xmpi_sum_intn(xval,n1,comm,ier)


 use defs_basis
 use m_profiling

!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_sum_intn'
!End of the abilint section

 implicit none

!Arguments-------------------------
 integer,intent(inout) :: xval(:)
 integer,intent(in)    :: n1
 integer,intent(in) :: comm
 integer,intent(out)   :: ier

!Local variables-------------------
#if defined HAVE_MPI
 integer :: nproc_space_comm
 integer , allocatable :: xsum(:)
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
!Accumulate xval on all proc. in comm
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   call MPI_COMM_SIZE(comm,nproc_space_comm,ier)
   if (nproc_space_comm /= 1) then

#if defined HAVE_MPI2 && defined HAVE_MPI2_INPLACE
     call MPI_ALLREDUCE(MPI_IN_PLACE,xval,n1,MPI_INTEGER,MPI_SUM,comm,ier)
#else
     ABI_ALLOCATE(xsum,(n1))
     if (ABI_ALLOC_STAT/= 0) then
       call xmpi_abort(comm=comm,msg='error allocating xsum in xmpi_sum_intn')
     end if
     call MPI_ALLREDUCE(xval,xsum,n1,MPI_INTEGER,MPI_SUM,comm,ier)
     xval (:) = xsum(:)
     ABI_DEALLOCATE(xsum)
#endif

   end if
 end if
#endif

end subroutine xmpi_sum_intn
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_sum_int2t
!! NAME
!!  xmpi_sum_int2t
!!
!! FUNCTION
!!  Combines values from all processes and distribute
!!  the result back to all processes.
!!  Target: one-dimensional integer array without transfers.
!!
!! INPUTS
!!  n1= first dimension of the array
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!  xsum= receive buffer
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_allreduce,xmpi_abort
!!
!! SOURCE
subroutine xmpi_sum_int2t(xval,xsum,n1,comm,ier)


 use defs_basis

!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_sum_int2t'
!End of the abilint section

 implicit none

!Arguments-------------------------
 integer,intent(inout) :: xval(:),xsum(:)
 integer,intent(in)    :: n1
 integer,intent(in) :: comm
 integer,intent(out)   :: ier

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
!  Accumulate xval on all proc. in comm
   call MPI_ALLREDUCE(xval,xsum,n1,MPI_INTEGER,MPI_SUM,comm,ier)
 else
#endif
   xsum=xval
#if defined HAVE_MPI
 end if
#endif

end subroutine xmpi_sum_int2t
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_sum_int2d
!! NAME
!!  xmpi_sum_int2d
!!
!! FUNCTION
!!  Combines values from all processes and distribute
!!  the result back to all processes.
!!  Target: two-dimensional integer arrays.
!!
!! INPUTS
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_allreduce,xmpi_abort
!!
!! SOURCE
subroutine xmpi_sum_int2d(xval,comm,ier)


 use defs_basis
 use m_profiling

!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_sum_int2d'
!End of the abilint section

 implicit none

!Arguments-------------------------
 integer,intent(inout) :: xval(:,:)
 integer,intent(in) :: comm
 integer,intent(out)   :: ier

!Local variables-------------------
#if defined HAVE_MPI
 integer :: n1,n2, nproc_space_comm
 integer,allocatable :: xsum(:,:)
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   call MPI_COMM_SIZE(comm,nproc_space_comm,ier)
   if (nproc_space_comm /= 1) then
!    Accumulate xval on all proc. in comm
     n1 =size(xval,dim=1)
     n2 =size(xval,dim=2)

#if defined HAVE_MPI2 && defined HAVE_MPI2_INPLACE
     call MPI_ALLREDUCE(MPI_IN_PLACE,xval,n1*n2,MPI_INTEGER,MPI_SUM,comm,ier)
#else
     ABI_ALLOCATE(xsum,(n1,n2))
     if (ABI_ALLOC_STAT/=0) then
       call xmpi_abort(comm=comm,msg='error allocating xsum in xmpi_sum_int2d')
     end if
     call MPI_ALLREDUCE(xval,xsum,n1*n2,MPI_INTEGER,MPI_SUM,comm,ier)
     xval (:,:) = xsum(:,:)
     ABI_DEALLOCATE(xsum)
#endif

   end if
 end if
#endif

end subroutine xmpi_sum_int2d
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_sum_int3d
!! NAME
!!  xmpi_sum_int3d
!!
!! FUNCTION
!!  Combines values from all processes and distribute
!!  the result back to all processes.
!!  Target: three-dimensional integer arrays.
!!
!! INPUTS
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_allreduce,xmpi_abort
!!
!! SOURCE
subroutine xmpi_sum_int3d(xval,comm,ier)


 use defs_basis
 use m_profiling

!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_sum_int3d'
!End of the abilint section

 implicit none

!Arguments-------------------------
 integer,intent(inout) :: xval(:,:,:)
 integer,intent(in) :: comm
 integer,intent(out)   :: ier

!Local variables-------------------
#if defined HAVE_MPI
 integer :: n1,n2,n3,nproc_space_comm
 integer,allocatable :: xsum(:,:,:)
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
!Accumulate xval on all proc. in comm
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   call MPI_COMM_SIZE(comm,nproc_space_comm,ier)
   if (nproc_space_comm /= 1) then
     n1 =size(xval,dim=1)
     n2 =size(xval,dim=2)
     n3 =size(xval,dim=3)

#if defined HAVE_MPI2 && defined HAVE_MPI2_INPLACE
     call MPI_ALLREDUCE(MPI_IN_PLACE,xval,n1*n2*n3,MPI_INTEGER,MPI_SUM,comm,ier)
#else
     ABI_ALLOCATE(xsum,(n1,n2,n3))
     if (ABI_ALLOC_STAT/= 0) then
       call xmpi_abort(comm=comm,msg='error allocating xsum in xmpi_sum_int3d')
     end if
     call MPI_ALLREDUCE(xval,xsum,n1*n2*n3,MPI_INTEGER,MPI_SUM,comm,ier)
     xval (:,:,:) = xsum(:,:,:)
     ABI_DEALLOCATE(xsum)
#endif

   end if
 end if
#endif

end subroutine xmpi_sum_int3d
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_sum_int4d
!! NAME
!!  xmpi_sum_int4d
!!
!! FUNCTION
!!  Combines values from all processes and distribute
!!  the result back to all processes.
!!  Target: four-diemnsional integer arrays.
!!
!! INPUTS
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_allreduce,xmpi_abort
!!
!! SOURCE
subroutine xmpi_sum_int4d(xval,comm,ier)


 use defs_basis
 use m_profiling

!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_sum_int4d'
!End of the abilint section

 implicit none

!Arguments-------------------------
 integer,intent(inout) :: xval(:,:,:,:)
 integer,intent(in) :: comm
 integer,intent(out)   :: ier

!Local variables-------------------
#if defined HAVE_MPI
 integer ::   n1,n2,n3,n4
 integer :: nproc_space_comm
 integer,allocatable :: xsum(:,:,:,:)
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
!Accumulate xval on all proc. in comm
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   call MPI_COMM_SIZE(comm,nproc_space_comm,ier)
   if (nproc_space_comm /= 1) then
     n1 =size(xval,dim=1)
     n2 =size(xval,dim=2)
     n3 =size(xval,dim=3)
     n4 =size(xval,dim=4)

#if defined HAVE_MPI2 && defined HAVE_MPI2_INPLACE
     call MPI_ALLREDUCE(MPI_IN_PLACE,xval,n1*n2*n3*n4,MPI_INTEGER,MPI_SUM,comm,ier)
#else
     ABI_ALLOCATE(xsum,(n1,n2,n3,n4))
     if (ABI_ALLOC_STAT/= 0) then
       call xmpi_abort(comm=comm,msg='error allocating xsum in xmpi_sum_int4d')
     end if
     call MPI_ALLREDUCE(xval,xsum,n1*n2*n3*n4,MPI_INTEGER,MPI_SUM,comm,ier)
     xval (:,:,:,:) = xsum(:,:,:,:)
     ABI_DEALLOCATE(xsum)
#endif

   end if
 end if
#endif

end subroutine xmpi_sum_int4d
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_sum_dp
!! NAME
!!  xmpi_sum_dp
!!
!! FUNCTION
!!  Combines values from all processes and distribute
!!  the result back to all processes.
!!  Target: one-dimensional double precision arrays.
!!
!! INPUTS
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_allreduce,xmpi_abort
!!
!! SOURCE
subroutine xmpi_sum_dp(xval,comm,ier)


 use defs_basis
 use m_profiling

!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_sum_dp'
!End of the abilint section

 implicit none


!Arguments-------------------------
 real(dp),intent(inout) :: xval(:)
 integer,intent(in) :: comm
 integer,intent(out)   :: ier

!Local variables-------------------
#if defined HAVE_MPI
 integer :: n1,nproc_space_comm
 real(dp),allocatable :: xsum(:)
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
!  Accumulate xval on all proc. in comm
   call MPI_COMM_SIZE(comm,nproc_space_comm,ier)
   if (nproc_space_comm /= 1) then
     n1 = size(xval)

#if defined HAVE_MPI2 && defined HAVE_MPI2_INPLACE
     call MPI_ALLREDUCE(MPI_IN_PLACE,xval,n1,MPI_DOUBLE_PRECISION,MPI_SUM,comm,ier)
#else
     ABI_ALLOCATE(xsum,(n1))
     if (ABI_ALLOC_STAT/= 0) then
       call xmpi_abort(comm=comm,msg='error allocating xsum in xmpi_sum_dp')
     end if
     call MPI_ALLREDUCE(xval,xsum,n1,MPI_DOUBLE_PRECISION,MPI_SUM,comm,ier)
     xval (:) = xsum(:)
     ABI_DEALLOCATE(xsum)
#endif

   end if
 end if
#endif

end subroutine xmpi_sum_dp
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_sum_dpvt
!! NAME
!!  xmpi_sum_dpvt
!!
!! FUNCTION
!!  Combines values from all processes and distribute
!!  the result back to all processes.
!!  Target: scalar double precisions.
!!
!! INPUTS
!!  xval= buffer array
!!  comm= MPI communicator
!!
!! OUTPUT
!!  xsum= receive buffer
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  None
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_allreduce,xmpi_abort
!!
!! SOURCE
subroutine xmpi_sum_dpvt(xval,xsum,comm,ier)


 use defs_basis

!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_sum_dpvt'
!End of the abilint section

 implicit none

!Arguments-------------------------
 real(dp),intent(in) :: xval
 real(dp),intent(out) :: xsum
 integer ,intent(in) :: comm
 integer ,intent(out)   :: ier

!Local variables-------------------
#if defined HAVE_MPI
 integer :: nproc_space_comm
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
!Accumulate xval on all proc. in comm
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   call MPI_COMM_SIZE(comm,nproc_space_comm,ier)
   if (nproc_space_comm /= 1) then
     call MPI_ALLREDUCE(xval,xsum,1,MPI_DOUBLE_PRECISION,MPI_SUM,comm,ier)
   else
     xsum=xval
   end if
 else
#endif
   xsum=xval
#if defined HAVE_MPI
 end if
#endif

end subroutine xmpi_sum_dpvt
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_sum_dpv
!! NAME
!!  xmpi_sum_dpv
!!
!! FUNCTION
!!  Combines values from all processes and distribute
!!  the result back to all processes.
!!  Target: scalar double precisions.
!!
!! INPUTS
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_allreduce,xmpi_abort
!!
!! SOURCE
subroutine xmpi_sum_dpv(xval,comm,ier)


 use defs_basis

!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_sum_dpv'
!End of the abilint section

 implicit none

!Arguments-------------------------
 real(dp),intent(inout) :: xval
 integer ,intent(in) :: comm
 integer ,intent(out)   :: ier

!Local variables-------------------
#if defined HAVE_MPI
 integer :: nproc_space_comm
 real(dp)  :: xsum
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
!Accumulate xval on all proc. in comm
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   call MPI_COMM_SIZE(comm,nproc_space_comm,ier)
   if (nproc_space_comm /= 1) then
     call MPI_ALLREDUCE(xval,xsum,1,MPI_DOUBLE_PRECISION,MPI_SUM,comm,ier)
     xval  = xsum
   end if
 end if
#endif

end subroutine xmpi_sum_dpv
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_sum_dpn
!! NAME
!!  xmpi_sum_dpn
!!
!! FUNCTION
!!  Combines values from all processes and distribute
!!  the result back to all processes.
!!  Target: one-dimensional double precision arrays.
!!
!! INPUTS
!!  n1= first dimension of the array
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_allreduce,xmpi_abort
!!
!! SOURCE
subroutine xmpi_sum_dpn(xval,n1,comm,ier)


 use defs_basis
 use m_profiling

!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_sum_dpn'
!End of the abilint section

 implicit none

!Arguments-------------------------
 real(dp),intent(inout) :: xval(:)
 integer ,intent(in)    :: n1
 integer ,intent(in) :: comm
 integer ,intent(out)   :: ier

!Local variables-------------------
#if defined HAVE_MPI
 integer :: nproc_space_comm
 real(dp) , allocatable :: xsum(:)
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
!  Accumulate xval on all proc. in comm
   call MPI_COMM_SIZE(comm,nproc_space_comm,ier)
   if (nproc_space_comm /= 1) then

#if defined HAVE_MPI2 && defined HAVE_MPI2_INPLACE
     call MPI_ALLREDUCE(MPI_IN_PLACE,xval,n1,MPI_DOUBLE_PRECISION,MPI_SUM,comm,ier)
#else
     ABI_ALLOCATE(xsum,(n1))
     if (ABI_ALLOC_STAT/= 0) then
       call xmpi_abort(comm=comm,msg='error allocating xsum in xmpi_sum_dpn')
     end if
     call MPI_ALLREDUCE(xval,xsum,n1,MPI_DOUBLE_PRECISION,MPI_SUM,comm,ier)
     xval (:) = xsum(:)
     ABI_DEALLOCATE(xsum)
#endif

   end if
 end if
#endif

end subroutine xmpi_sum_dpn
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_sum_dp2d
!! NAME
!!  xmpi_sum_dp2d
!!
!! FUNCTION
!!  Combines values from all processes and distribute
!!  the result back to all processes.
!!  Target: double precision two-dimensional arrays.
!!
!! INPUTS
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_allreduce,xmpi_abort
!!
!! SOURCE
subroutine xmpi_sum_dp2d(xval,comm,ier)


 use defs_basis
 use m_profiling

!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_sum_dp2d'
!End of the abilint section

 implicit none


!Arguments-------------------------
 real(dp),intent(inout) :: xval(:,:)
 integer ,intent(in) :: comm
 integer ,intent(out)   :: ier

!Local variables-------------------
#if defined HAVE_MPI
 integer :: n1,n2,nproc_space_comm
 real(dp),allocatable :: xsum(:,:)
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   call MPI_COMM_SIZE(comm,nproc_space_comm,ier)
   if (nproc_space_comm /= 1) then
     n1 = size(xval,dim=1)
     n2 = size(xval,dim=2)
!    Accumulate xval on all proc. in comm

#if defined HAVE_MPI2 && defined HAVE_MPI2_INPLACE
     call MPI_ALLREDUCE(MPI_IN_PLACE,xval,n1*n2,MPI_DOUBLE_PRECISION,MPI_SUM,comm,ier)
#else
     ABI_ALLOCATE(xsum,(n1,n2))
     if (ABI_ALLOC_STAT/= 0) then
       call xmpi_abort(comm=comm,msg='error allocating xsum in xmpi_sum_dp2d')
     end if
     call MPI_ALLREDUCE(xval,xsum,n1*n2,MPI_DOUBLE_PRECISION,MPI_SUM,comm,ier)
     xval (:,:) = xsum(:,:)
     ABI_DEALLOCATE(xsum)
#endif
   end if
 end if
#endif

end subroutine xmpi_sum_dp2d
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_sum_dp3d
!! NAME
!!  xmpi_sum_dp3d
!!
!! FUNCTION
!!  Combines values from all processes and distribute
!!  the result back to all processes.
!!  Target: double precision three-dimensional arrays.
!!
!! INPUTS
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_allreduce,xmpi_abort
!!
!! SOURCE
subroutine xmpi_sum_dp3d(xval,comm,ier)


 use defs_basis
 use m_profiling

!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_sum_dp3d'
!End of the abilint section

 implicit none

!Arguments-------------------------
 real(dp),intent(inout) :: xval(:,:,:)
 integer ,intent(in) :: comm
 integer ,intent(out)   :: ier

!Local variables-------------------
#if defined HAVE_MPI
 integer :: n1,n2,n3,nproc_space_comm
 real(dp),allocatable :: xsum(:,:,:)
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   call MPI_COMM_SIZE(comm,nproc_space_comm,ier)
   if (nproc_space_comm /= 1) then
     n1 = size(xval,dim=1)
     n2 = size(xval,dim=2)
     n3 = size(xval,dim=3)
!    Accumulate xval on all proc. in comm

#if defined HAVE_MPI2 && defined HAVE_MPI2_INPLACE
     call MPI_ALLREDUCE(MPI_IN_PLACE,xval,n1*n2*n3,MPI_DOUBLE_PRECISION,MPI_SUM,comm,ier)
#else
     ABI_ALLOCATE(xsum,(n1,n2,n3))
     if (ABI_ALLOC_STAT/= 0) then
       call xmpi_abort(comm=comm,msg='error allocating xsum in xmpi_sum_dp3d')
     end if
     call MPI_ALLREDUCE(xval,xsum,n1*n2*n3,MPI_DOUBLE_PRECISION,MPI_SUM,comm,ier)
     xval (:,:,:) = xsum(:,:,:)
     ABI_DEALLOCATE(xsum)
#endif

   end if
 end if
#endif

end subroutine xmpi_sum_dp3d
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_sum_dp4d
!! NAME
!!  xmpi_sum_dp4d
!!
!! FUNCTION
!!  Combines values from all processes and distribute
!!  the result back to all processes.
!!  Target: double precision four-dimensional arrays.
!!
!! INPUTS
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_allreduce,xmpi_abort
!!
!! SOURCE
subroutine xmpi_sum_dp4d(xval,comm,ier)


 use defs_basis
 use m_profiling

!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_sum_dp4d'
!End of the abilint section

 implicit none

!Arguments-------------------------
 real(dp),intent(inout) :: xval(:,:,:,:)
 integer ,intent(in) :: comm
 integer ,intent(out)   :: ier

!Local variables-------------------
#if defined HAVE_MPI
 integer :: n1,n2,n3,n4,nproc_space_comm
 real(dp),allocatable :: xsum(:,:,:,:)
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   call MPI_COMM_SIZE(comm,nproc_space_comm,ier)
   if (nproc_space_comm /= 1) then
     n1 = size(xval,dim=1)
     n2 = size(xval,dim=2)
     n3 = size(xval,dim=3)
     n4 = size(xval,dim=4)
!    Accumulate xval on all proc. in comm

#if defined HAVE_MPI2 && defined HAVE_MPI2_INPLACE
     call MPI_ALLREDUCE(MPI_IN_PLACE,xval,n1*n2*n3*n4,MPI_DOUBLE_PRECISION,MPI_SUM,comm,ier)
#else
     ABI_ALLOCATE(xsum,(n1,n2,n3,n4))
     if (ABI_ALLOC_STAT/= 0) then
       call xmpi_abort(comm=comm,msg='error allocating xsum in xmpi_sum_dp4d')
     end if
     call MPI_ALLREDUCE(xval,xsum,n1*n2*n3*n4,MPI_DOUBLE_PRECISION,MPI_SUM,comm,ier)
     xval (:,:,:,:) = xsum(:,:,:,:)
     ABI_DEALLOCATE(xsum)
#endif

   end if
 end if
#endif

end subroutine xmpi_sum_dp4d
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_sum_dp5d
!! NAME
!!  xmpi_sum_dp5d
!!
!! FUNCTION
!!  Combines values from all processes and distribute
!!  the result back to all processes.
!!  Target: double precision five-dimensional arrays.
!!
!! INPUTS
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_allreduce,xmpi_abort
!!
!! SOURCE
subroutine xmpi_sum_dp5d(xval,comm,ier)


 use defs_basis
 use m_profiling

!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_sum_dp5d'
!End of the abilint section

 implicit none

!Arguments-------------------------
 real(dp),intent(inout) :: xval(:,:,:,:,:)
 integer ,intent(in) :: comm
 integer ,intent(out)   :: ier

!Local variables-------------------
#if defined HAVE_MPI
 integer :: n1,n2,n3,n4,n5,nproc_space_comm
 real(dp),allocatable :: xsum(:,:,:,:,:)
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   call MPI_COMM_SIZE(comm,nproc_space_comm,ier)
   if (nproc_space_comm /= 1) then
     n1 = size(xval,dim=1)
     n2 = size(xval,dim=2)
     n3 = size(xval,dim=3)
     n4 = size(xval,dim=4)
     n5 = size(xval,dim=5)
!    Accumulate xval on all proc. in comm

#if defined HAVE_MPI2 && defined HAVE_MPI2_INPLACE
     call MPI_ALLREDUCE(MPI_IN_PLACE,xval,n1*n2*n3*n4*n5,MPI_DOUBLE_PRECISION,MPI_SUM,comm,ier)
#else
     ABI_ALLOCATE(xsum,(n1,n2,n3,n4,n5))
     if (ABI_ALLOC_STAT/= 0) then
       call xmpi_abort(comm=comm,msg='error allocating xsum in xmpi_sum_dp5d')
     end if
     call MPI_ALLREDUCE(xval,xsum,n1*n2*n3*n4*n5,MPI_DOUBLE_PRECISION,MPI_SUM,comm,ier)
     xval (:,:,:,:,:) = xsum(:,:,:,:,:)
     ABI_DEALLOCATE(xsum)
#endif

   end if
 end if
#endif

end subroutine xmpi_sum_dp5d
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_sum_dp6d
!! NAME
!!  xmpi_sum_dp6d
!!
!! FUNCTION
!!  Combines values from all processes and distribute
!!  the result back to all processes.
!!  Target: double precision six-dimensional arrays.
!!
!! INPUTS
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_allreduce,xmpi_abort
!!
!! SOURCE
subroutine xmpi_sum_dp6d(xval,comm,ier)


 use defs_basis
 use m_profiling

!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_sum_dp6d'
!End of the abilint section

 implicit none


!Arguments-------------------------
 real(dp),intent(inout) :: xval(:,:,:,:,:,:)
 integer ,intent(in) :: comm
 integer ,intent(out)   :: ier

!Local variables-------------------
#if defined HAVE_MPI
 integer :: n1,n2,n3,n4,n5,n6,nproc_space_comm
 real(dp) , allocatable :: xsum(:,:,:,:,:,:)
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   call MPI_COMM_SIZE(comm,nproc_space_comm,ier)
   if (nproc_space_comm /= 1) then
     n1 = size(xval,dim=1)
     n2 = size(xval,dim=2)
     n3 = size(xval,dim=3)
     n4 = size(xval,dim=4)
     n5 = size(xval,dim=5)
     n6 = size(xval,dim=6)
!    Accumulate xval on all proc. in comm
#if defined HAVE_MPI2 && defined HAVE_MPI2_INPLACE
     call MPI_ALLREDUCE(MPI_IN_PLACE,xval,n1*n2*n3*n4*n5*n6,MPI_DOUBLE_PRECISION,MPI_SUM,comm,ier)
#else
     ABI_ALLOCATE(xsum,(n1,n2,n3,n4,n5,n6))
     if (ABI_ALLOC_STAT/=0) then
       call xmpi_abort(comm=comm,msg='error allocating xsum in xmpi_sum_dp6d')
     end if
     call MPI_ALLREDUCE(xval,xsum,n1*n2*n3*n4*n5*n6,MPI_DOUBLE_PRECISION,MPI_SUM,comm,ier)
     xval (:,:,:,:,:,:) = xsum(:,:,:,:,:,:)
     ABI_DEALLOCATE(xsum)
#endif

   end if
 end if
#endif

end subroutine xmpi_sum_dp6d
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_sum_dp7d
!! NAME
!!  xmpi_sum_dp7d
!!
!! FUNCTION
!!  Combines values from all processes and distribute
!!  the result back to all processes.
!!  Target: double precision six-dimensional arrays.
!!   
!! INPUTS 
!!  comm= MPI communicator
!!   
!! OUTPUT 
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!   
!! PARENTS
!!
!! CHILDREN
!!      mpi_allreduce,xmpi_abort
!!
!! SOURCE
subroutine xmpi_sum_dp7d(xval,comm,ier)


 use defs_basis
 use m_profiling

!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_sum_dp7d'
!End of the abilint section

 implicit none

!Arguments-------------------------
 real(dp),intent(inout) :: xval(:,:,:,:,:,:,:)
 integer ,intent(in) :: comm
 integer ,intent(out)   :: ier

!Local variables-------------------
#if defined HAVE_MPI
 integer :: n1,n2,n3,n4,n5,n6,n7,nproc_space_comm
 real(dp),allocatable :: xsum(:,:,:,:,:,:,:)
#endif

! *************************************************************************
 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   call MPI_COMM_SIZE(comm,nproc_space_comm,ier)
   if (nproc_space_comm /= 1) then
     n1 = size(xval,dim=1)
     n2 = size(xval,dim=2)
     n3 = size(xval,dim=3)
     n4 = size(xval,dim=4)
     n5 = size(xval,dim=5)
     n6 = size(xval,dim=6)
     n7 = size(xval,dim=7)
!    Accumulate xval on all proc. in comm

#if defined HAVE_MPI2 && defined HAVE_MPI2_INPLACE
     call MPI_ALLREDUCE(MPI_IN_PLACE,xval,n1*n2*n3*n4*n5*n6*n7,MPI_DOUBLE_PRECISION,MPI_SUM,comm,ier)
#else
     ABI_ALLOCATE(xsum,(n1,n2,n3,n4,n5,n6,n7))
     if (ABI_ALLOC_STAT/= 0) then
       call xmpi_abort(comm=comm,msg='error allocating xsum in xmpi_sum_dp7d')
     end if
     call MPI_ALLREDUCE(xval,xsum,n1*n2*n3*n4*n5*n6*n7,MPI_DOUBLE_PRECISION,MPI_SUM,comm,ier)
     xval (:,:,:,:,:,:,:) = xsum(:,:,:,:,:,:,:)
     ABI_DEALLOCATE(xsum)
#endif

   end if
 end if
#endif

end subroutine xmpi_sum_dp7d
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_sum_dp2t
!! NAME
!!  xmpi_sum_dp2t
!!
!! FUNCTION
!!  Combines values from all processes and distribute
!!  the result back to all processes.
!!  Target: double precision one-dimensional array without transfers.
!!
!! INPUTS
!!  n1= first dimension of the array
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!  xsum= receive buffer
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_allreduce,xmpi_abort
!!
!! SOURCE
subroutine xmpi_sum_dp2t(xval,xsum,n1,comm,ier)


 use defs_basis

!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_sum_dp2t'
!End of the abilint section

 implicit none

!Arguments-------------------------
 real(dp),intent(inout) :: xval(:),xsum(:)
 integer ,intent(in)    :: n1
 integer ,intent(in) :: comm
 integer ,intent(out)   :: ier

!Local variables-------------------

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
!  Accumulate xval on all proc. in comm
   call MPI_ALLREDUCE(xval,xsum,n1,MPI_DOUBLE_PRECISION,MPI_SUM,comm,ier)
 else
#endif
   xsum=xval
#if defined HAVE_MPI
 end if
#endif

end subroutine xmpi_sum_dp2t
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_sum_dp2d2t
!! NAME
!!  xmpi_sum_dp2d2t
!!
!! FUNCTION
!!  Combines values from all processes and distribute
!!  the result back to all processes.
!!  Target:  double precisions bi-dimensional array 
!!
!! INPUTS
!!  n = total send size
!!  xval= buffer array
!!  spaceComm= MPI communicator
!!
!! OUTPUT
!!  xsum= receive buffer
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  None
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_allreduce,xmpi_abort
!!
!! SOURCE
subroutine xmpi_sum_dp2d2t(xval,xsum,n,spaceComm,ier)


 use defs_basis

!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_sum_dp2d2t'
!End of the abilint section

 implicit none

!Arguments-------------------------
 real(dp),intent(in) :: xval(:,:)
 real(dp),intent(out) :: xsum(:,:)
 integer ,intent(in) :: n
 integer ,intent(in) :: spaceComm
 integer ,intent(out)   :: ier

!Local variables-------------------
#if defined HAVE_MPI
 integer :: nproc_space_comm
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
!Accumulate xval on all proc. in spaceComm
 if (spaceComm /= MPI_COMM_SELF .and. spaceComm /= MPI_COMM_NULL) then
   call MPI_ALLREDUCE(xval,xsum,n,MPI_DOUBLE_PRECISION,MPI_SUM,spaceComm,ier)
 else
#endif
   xsum=xval
#if defined HAVE_MPI
 end if
#endif

end subroutine xmpi_sum_dp2d2t
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_sum_dp3d2t
!! NAME
!!  xmpi_sum_dp3d2t
!!
!! FUNCTION
!!  Combines values from all processes and distribute
!!  the result back to all processes.
!!  Target: double precision three-dimensional array without transfers.
!!
!! INPUTS
!!  n1= first dimension of the array
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!  xsum= receive buffer
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_allreduce,xmpi_abort
!!
!! SOURCE
subroutine xmpi_sum_dp3d2t(xval,xsum,n1,comm,ier)


 use defs_basis

!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_sum_dp3d2t'
!End of the abilint section

 implicit none

!Arguments-------------------------
 real(dp),intent(inout) :: xval(:,:,:),xsum(:,:,:)
 integer ,intent(in)    :: n1
 integer ,intent(in) :: comm
 integer ,intent(out)   :: ier

!Local variables-------------------

! *************************************************************************
 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
!  Accumulate xval on all proc. in comm
   call MPI_ALLREDUCE(xval,xsum,n1,MPI_DOUBLE_PRECISION,MPI_SUM,comm,ier)
 else
#endif
   xsum=xval
#if defined HAVE_MPI
 end if
#endif

end subroutine xmpi_sum_dp3d2t
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_sum_dp4d2t
!! NAME
!!  xmpi_sum_dp4d2t
!!
!! FUNCTION
!!  Combines values from all processes and distribute
!!  the result back to all processes.
!!  Target: double precision four-dimensional array without transfers.
!!
!! INPUTS
!!  n1= first dimension of the array
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!  xsum= receive buffer
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_allreduce,xmpi_abort
!!
!! SOURCE
subroutine xmpi_sum_dp4d2t(xval,xsum,n1,comm,ier)


 use defs_basis

!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_sum_dp4d2t'
!End of the abilint section

 implicit none

!Arguments-------------------------
 real(dp),intent(inout) :: xval(:,:,:,:),xsum(:,:,:,:)
 integer ,intent(in)    :: n1
 integer ,intent(in) :: comm
 integer ,intent(out)   :: ier

!Local variables-------------------

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
!  Accumulate xval on all proc. in comm
   call MPI_ALLREDUCE(xval,xsum,n1,MPI_DOUBLE_PRECISION,MPI_SUM,comm,ier)
 else
#endif
   xsum=xval
#if defined HAVE_MPI
 end if
#endif

end subroutine xmpi_sum_dp4d2t
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_sum_c0dc
!! NAME
!!  xmpi_sum_c0dc
!!
!! FUNCTION
!!  Combines values from all processes and distribute the result back to all processes.
!!  Target: double complex scalar
!!
!! INPUTS
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= scalar to be summed.
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_allreduce,xmpi_abort
!!
!! SOURCE
subroutine xmpi_sum_c0dc(xval,comm,ier)


 use defs_basis

!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_sum_c0dc'
!End of the abilint section

 implicit none

!Arguments-------------------------
 complex(dpc),intent(inout) :: xval
 integer,intent(in) :: comm
 integer,intent(out)   :: ier

!Local variables-------------------
#if defined HAVE_MPI
 integer :: nproc_space_comm
 complex(dpc) :: xsum
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   call MPI_COMM_SIZE(comm,nproc_space_comm,ier)
   if (nproc_space_comm /= 1) then
!    Accumulate xval on all proc. in comm
     call MPI_ALLREDUCE(xval,xsum,1,MPI_DOUBLE_COMPLEX,MPI_SUM,comm,ier)
     xval = xsum
   end if
 end if
#endif

end subroutine xmpi_sum_c0dc
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_sum_c1dc
!! NAME
!!  xmpi_sum_c1dc
!!
!! FUNCTION
!!  Combines values from all processes and distribute
!!  the result back to all processes.
!!  Target: one-dimensional double complex arrays.
!!
!! INPUTS
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_allreduce,xmpi_abort
!!
!! SOURCE
subroutine xmpi_sum_c1dc(xval,comm,ier)


 use defs_basis
 use m_profiling

!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_sum_c1dc'
!End of the abilint section

 implicit none

!Arguments-------------------------
 complex(dpc),intent(inout) :: xval(:)
 integer,intent(in) :: comm
 integer,intent(out)   :: ier

!Local variables-------------------
#if defined HAVE_MPI
 integer :: n1,nproc_space_comm
 complex(dpc) , allocatable :: xsum(:)
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   call MPI_COMM_SIZE(comm,nproc_space_comm,ier)
   if (nproc_space_comm /= 1) then
!    Accumulate xval on all proc. in comm
     n1 =size(xval,dim=1)

#if defined HAVE_MPI2 && defined HAVE_MPI2_INPLACE
     call MPI_ALLREDUCE(MPI_IN_PLACE,xval,n1,MPI_DOUBLE_COMPLEX,MPI_SUM,comm,ier)
#else
     ABI_ALLOCATE(xsum,(n1))
     if (ABI_ALLOC_STAT/= 0) then
       call xmpi_abort(comm=comm,msg='error allocating xsum in xmpi_sum_c1dc')
     end if
     call MPI_ALLREDUCE(xval,xsum,n1,MPI_DOUBLE_COMPLEX,MPI_SUM,comm,ier)
     xval (:) = xsum(:)
     ABI_DEALLOCATE(xsum)
#endif

   end if
 end if
#endif

end subroutine xmpi_sum_c1dc
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_sum_c2dc
!! NAME
!!  xmpi_sum_c2dc
!!
!! FUNCTION
!!  Combines values from all processes and distribute
!!  the result back to all processes.
!!  Target: two-dimensional double complex arrays.
!!
!! INPUTS
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_allreduce,xmpi_abort
!!
!! SOURCE
subroutine xmpi_sum_c2dc(xval,comm,ier)


 use defs_basis
 use m_profiling

!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_sum_c2dc'
!End of the abilint section

 implicit none

!Arguments-------------------------
 complex(dpc),intent(inout) :: xval(:,:)
 integer,intent(in) :: comm
 integer,intent(out)   :: ier

!Local variables-------------------
#if defined HAVE_MPI
 integer :: n1,n2, nproc_space_comm
 complex(dpc),allocatable :: xsum(:,:)
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   call MPI_COMM_SIZE(comm,nproc_space_comm,ier)
   if (nproc_space_comm /= 1) then
!    Accumulate xval on all proc. in comm
     n1 =size(xval,dim=1)
     n2 =size(xval,dim=2)

#if defined HAVE_MPI2 && defined HAVE_MPI2_INPLACE
     call MPI_ALLREDUCE(MPI_IN_PLACE,xval,n1*n2,MPI_DOUBLE_COMPLEX,MPI_SUM,comm,ier)
#else
     ABI_ALLOCATE(xsum,(n1,n2))
     if (ABI_ALLOC_STAT/= 0) then
       call xmpi_abort(comm=comm,msg='error allocating xsum in xmpi_sum_c2dc')
     end if
     call MPI_ALLREDUCE(xval,xsum,n1*n2,MPI_DOUBLE_COMPLEX,MPI_SUM,comm,ier)
     xval (:,:) = xsum(:,:)
     ABI_DEALLOCATE(xsum)
#endif

   end if
 end if
#endif

end subroutine xmpi_sum_c2dc
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_sum_c3dc
!! NAME
!!  xmpi_sum_c3dc
!!
!! FUNCTION
!!  Combines values from all processes and distribute
!!  the result back to all processes.
!!  Target: three-dimensional double complex arrays.
!!
!! INPUTS
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_allreduce,xmpi_abort
!!
!! SOURCE
subroutine xmpi_sum_c3dc(xval,comm,ier)


 use defs_basis
 use m_profiling

!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_sum_c3dc'
!End of the abilint section

 implicit none

!Arguments-------------------------
 complex(dpc),intent(inout) :: xval(:,:,:)
 integer,intent(in) :: comm
 integer,intent(out)   :: ier

!Local variables-------------------
#if defined HAVE_MPI
 integer :: n1,n2,n3,nproc_space_comm
 complex(dpc),allocatable :: xsum(:,:,:)
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   call MPI_COMM_SIZE(comm,nproc_space_comm,ier)
   if (nproc_space_comm /= 1) then
!    Accumulate xval on all proc. in comm
     n1 =size(xval,dim=1)
     n2 =size(xval,dim=2)
     n3 =size(xval,dim=3)

#if defined HAVE_MPI2 && defined HAVE_MPI2_INPLACE
     call MPI_ALLREDUCE(MPI_IN_PLACE,xval,n1*n2*n3,MPI_DOUBLE_COMPLEX,MPI_SUM,comm,ier)
#else
     ABI_ALLOCATE(xsum,(n1,n2,n3))
     if (ABI_ALLOC_STAT/= 0) then
       call xmpi_abort(comm=comm,msg='error allocating xsum in xmpi_sum_c3dc')
     end if
     call MPI_ALLREDUCE(xval,xsum,n1*n2*n3,MPI_DOUBLE_COMPLEX,MPI_SUM,comm,ier)
     xval (:,:,:) = xsum(:,:,:)
     ABI_DEALLOCATE(xsum)
#endif

   end if
 end if
#endif

end subroutine xmpi_sum_c3dc
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_sum_c4dc
!! NAME
!!  xmpi_sum_c4dc
!!
!! FUNCTION
!!  Combines values from all processes and distribute
!!  the result back to all processes.
!!  Target: four-dimensional double complex arrays.
!!
!! INPUTS
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_allreduce,xmpi_abort
!!
!! SOURCE
subroutine xmpi_sum_c4dc(xval,comm,ier)


 use defs_basis
 use m_profiling

!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_sum_c4dc'
!End of the abilint section

 implicit none

!Arguments-------------------------
 complex(dpc),intent(inout) :: xval(:,:,:,:)
 integer,intent(in) :: comm
 integer,intent(out)   :: ier

!Local variables-------------------
#if defined HAVE_MPI
 integer :: n1,n2,n3,n4,nproc_space_comm
 complex(dpc),allocatable :: xsum(:,:,:,:)
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   call MPI_COMM_SIZE(comm,nproc_space_comm,ier)
   if (nproc_space_comm /= 1) then
!    Accumulate xval on all proc. in comm
     n1 =size(xval,dim=1)
     n2 =size(xval,dim=2)
     n3 =size(xval,dim=3)
     n4 =size(xval,dim=4)

#if defined HAVE_MPI2 && defined HAVE_MPI2_INPLACE
     call MPI_ALLREDUCE(MPI_IN_PLACE,xval,n1*n2*n3*n4,MPI_DOUBLE_COMPLEX,MPI_SUM,comm,ier)
#else
     ABI_ALLOCATE(xsum,(n1,n2,n3,n4))
     if (ABI_ALLOC_STAT/= 0) then
       call xmpi_abort(comm=comm,msg='error allocating xsum in xmpi_sum_c4dc')
     end if
     call MPI_ALLREDUCE(xval,xsum,n1*n2*n3*n4,MPI_DOUBLE_COMPLEX,MPI_SUM,comm,ier)
     xval (:,:,:,:) = xsum(:,:,:,:)
     ABI_DEALLOCATE(xsum)
#endif

   end if
 end if
#endif

end subroutine xmpi_sum_c4dc
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_sum_c5dc
!! NAME
!!  xmpi_sum_c5dc
!!
!! FUNCTION
!!  Combines values from all processes and distribute the result back to all processes.
!!  Target: five-dimensional double precision complex arrays.
!!
!! INPUTS
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_allreduce,xmpi_abort
!!
!! SOURCE
subroutine xmpi_sum_c5dc(xval,comm,ier)


 use defs_basis
 use m_profiling

!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_sum_c5dc'
!End of the abilint section

 implicit none

!Arguments-------------------------
 complex(dpc),intent(inout) :: xval(:,:,:,:,:)
 integer,intent(in) :: comm
 integer,intent(out)   :: ier

!Local variables-------------------
#if defined HAVE_MPI
 integer :: n1,n2,n3,n4,n5,nproc_space_comm
 complex(dpc),allocatable :: xsum(:,:,:,:,:)
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   call MPI_COMM_SIZE(comm,nproc_space_comm,ier)
   if (nproc_space_comm /= 1) then !Accumulate xval on all proc. in comm
     n1 =size(xval,dim=1)
     n2 =size(xval,dim=2)
     n3 =size(xval,dim=3)
     n4 =size(xval,dim=4)
     n5 =size(xval,dim=5)
#if defined HAVE_MPI2 && defined HAVE_MPI2_INPLACE
     call MPI_ALLREDUCE(MPI_IN_PLACE,xval,n1*n2*n3*n4*n5,MPI_DOUBLE_COMPLEX,MPI_SUM,comm,ier)
#else
     ABI_ALLOCATE(xsum,(n1,n2,n3,n4,n5))
     if (ABI_ALLOC_STAT/=0) then
       call xmpi_abort(comm=comm,msg='error allocating xsum in xmpi_sum_c5dc')
     end if
     call MPI_ALLREDUCE(xval,xsum,n1*n2*n3*n4*n5,MPI_DOUBLE_COMPLEX,MPI_SUM,comm,ier)
     xval (:,:,:,:,:) = xsum(:,:,:,:,:)
     ABI_DEALLOCATE(xsum)
#endif
   end if
 end if
#endif

end subroutine xmpi_sum_c5dc
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_sum_c6dc
!! NAME
!!  xmpi_sum_c6dc
!!
!! FUNCTION
!!  Combines values from all processes and distribute the result back to all processes.
!!  Target: six-dimensional double precision complex arrays.
!!
!! INPUTS
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_allreduce,xmpi_abort
!!
!! SOURCE
subroutine xmpi_sum_c6dc(xval,comm,ier)


 use defs_basis
 use m_profiling

!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_sum_c6dc'
!End of the abilint section

 implicit none

!Arguments-------------------------
 complex(dpc),intent(inout) :: xval(:,:,:,:,:,:)
 integer,intent(in) :: comm
 integer,intent(out)   :: ier

!Local variables-------------------
#if defined HAVE_MPI
 integer :: n1,n2,n3,n4,n5,n6,nproc_space_comm
 complex(dpc),allocatable :: xsum(:,:,:,:,:,:)
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   call MPI_COMM_SIZE(comm,nproc_space_comm,ier)
   if (nproc_space_comm /= 1) then !Accumulate xval on all proc. in comm
     n1 =size(xval,dim=1)
     n2 =size(xval,dim=2)
     n3 =size(xval,dim=3)
     n4 =size(xval,dim=4)
     n5 =size(xval,dim=5)
     n6 =size(xval,dim=6)

#if defined HAVE_MPI2 && defined HAVE_MPI2_INPLACE
     call MPI_ALLREDUCE(MPI_IN_PLACE,xval,n1*n2*n3*n4*n5*n6,MPI_DOUBLE_COMPLEX,MPI_SUM,comm,ier)
#else
     ABI_ALLOCATE(xsum,(n1,n2,n3,n4,n5,n6))
     if (ABI_ALLOC_STAT/=0) then
       call xmpi_abort(comm=comm,msg='error allocating xsum in xmpi_sum_c6dc')
     end if
     call MPI_ALLREDUCE(xval,xsum,n1*n2*n3*n4*n5*n6,MPI_DOUBLE_COMPLEX,MPI_SUM,comm,ier)
     xval = xsum
     ABI_DEALLOCATE(xsum)
#endif

   end if
 end if
#endif

end subroutine xmpi_sum_c6dc
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_sum_c1cplx
!! NAME
!!  xmpi_sum_c1cplx
!!
!! FUNCTION
!!  Combines values from all processes and distribute
!!  the result back to all processes.
!!  Target: one-dimensional complex arrays.
!!
!! INPUTS
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_allreduce,xmpi_abort
!!
!! SOURCE
subroutine xmpi_sum_c1cplx(xval,comm,ier)


 use defs_basis
 use m_profiling

!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_sum_c1cplx'
!End of the abilint section

 implicit none

!Arguments----------------
 complex(spc),intent(inout) :: xval(:)
 integer,intent(in) :: comm
 integer,intent(out)   :: ier

!Local variables--------------
#if defined HAVE_MPI
 integer :: n1,nproc_space_comm
 complex(spc),allocatable :: xsum(:)
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   call MPI_COMM_SIZE(comm,nproc_space_comm,ier)
   if (nproc_space_comm /= 1) then
!    Accumulate xval on all proc. in comm
     n1 =size(xval,dim=1)

#if defined HAVE_MPI2 && defined HAVE_MPI2_INPLACE
     call MPI_ALLREDUCE(MPI_IN_PLACE,xval,n1,MPI_COMPLEX,MPI_SUM,comm,ier)
#else
     ABI_ALLOCATE(xsum,(n1))
     if (ABI_ALLOC_STAT/= 0) then
       call xmpi_abort(comm=comm,msg='error allocating xsum in xmpi_sum_c1cplx')
     end if
     call MPI_ALLREDUCE(xval,xsum,n1,MPI_COMPLEX,MPI_SUM,comm,ier)
     xval (:) = xsum(:)
     ABI_DEALLOCATE(xsum)
#endif

   end if
 end if
#endif

end subroutine xmpi_sum_c1cplx
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_sum_c2cplx
!! NAME
!!  xmpi_sum_c2cplx
!!
!! FUNCTION
!!  Combines values from all processes and distribute
!!  the result back to all processes.
!!  Target: two-dimensional complex arrays.
!!
!! INPUTS
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_allreduce,xmpi_abort
!!
!! SOURCE
subroutine xmpi_sum_c2cplx(xval,comm,ier)


 use defs_basis
 use m_profiling

!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_sum_c2cplx'
!End of the abilint section

 implicit none

!Arguments----------------
 complex(spc),intent(inout) :: xval(:,:)
 integer,intent(in) :: comm
 integer,intent(out)   :: ier

!Local variables--------------
#if defined HAVE_MPI
 integer :: n1,n2,nproc_space_comm
 complex(spc), allocatable :: xsum(:,:)
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   call MPI_COMM_SIZE(comm,nproc_space_comm,ier)
   if (nproc_space_comm /= 1) then
!    Accumulate xval on all proc. in comm
     n1 =size(xval,dim=1)
     n2 =size(xval,dim=2)

#if defined HAVE_MPI2 && defined HAVE_MPI2_INPLACE
     call MPI_ALLREDUCE(MPI_IN_PLACE,xval,n1*n2,MPI_COMPLEX,MPI_SUM,comm,ier)
#else
     ABI_ALLOCATE(xsum,(n1,n2))
     if (ABI_ALLOC_STAT/= 0) then
       call xmpi_abort(comm=comm,msg='error allocating xsum in xmpi_sum_c2cplx')
     end if
     call MPI_ALLREDUCE(xval,xsum,n1*n2,MPI_COMPLEX,MPI_SUM,comm,ier)
     xval (:,:) = xsum(:,:)
     ABI_DEALLOCATE(xsum)
#endif

   end if
 end if
#endif

end subroutine xmpi_sum_c2cplx
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_sum_c3cplx
!! NAME
!!  xmpi_sum_c3cplx
!!
!! FUNCTION
!!  Combines values from all processes and distribute
!!  the result back to all processes.
!!  Target: three-dimensional complex arrays.
!!
!! INPUTS
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_allreduce,xmpi_abort
!!
!! SOURCE
subroutine xmpi_sum_c3cplx(xval,comm,ier)


 use defs_basis
 use m_profiling

!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_sum_c3cplx'
!End of the abilint section

 implicit none

!Arguments----------------
 complex(spc),intent(inout) :: xval(:,:,:)
 integer,intent(in) :: comm
 integer,intent(out)   :: ier

!Local variables--------------
#if defined HAVE_MPI
 integer :: n1,n2,n3,nproc_space_comm
 complex(spc), allocatable :: xsum(:,:,:)
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   call MPI_COMM_SIZE(comm,nproc_space_comm,ier)
   if (nproc_space_comm /= 1) then
!    Accumulate xval on all proc. in comm
     n1 =size(xval,dim=1)
     n2 =size(xval,dim=2)
     n3 =size(xval,dim=3)

#if defined HAVE_MPI2 && defined HAVE_MPI2_INPLACE
     call MPI_ALLREDUCE(MPI_IN_PLACE,xval,n1*n2*n3,MPI_COMPLEX,MPI_SUM,comm,ier)
#else
     ABI_ALLOCATE(xsum,(n1,n2,n3))
     if (ABI_ALLOC_STAT/= 0) then
       call xmpi_abort(comm=comm,msg='error allocating xsum in xmpi_sum_c3cplx')
     end if
     call MPI_ALLREDUCE(xval,xsum,n1*n2*n3,MPI_COMPLEX,MPI_SUM,comm,ier)
     xval (:,:,:) = xsum(:,:,:)
     ABI_DEALLOCATE(xsum)
#endif

   end if
 end if
#endif

end subroutine xmpi_sum_c3cplx
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_sum_c4cplx
!! NAME
!!  xmpi_sum_c4cplx
!!
!! FUNCTION
!!  Combines values from all processes and distribute
!!  the result back to all processes.
!!  Target: four-dimensional complex arrays.
!!
!! INPUTS
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_allreduce,xmpi_abort
!!
!! SOURCE
subroutine xmpi_sum_c4cplx(xval,comm,ier)


 use defs_basis
 use m_profiling

!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_sum_c4cplx'
!End of the abilint section

 implicit none


!Arguments----------------
 complex(spc),intent(inout) :: xval(:,:,:,:)
 integer,intent(in) :: comm
 integer,intent(out)   :: ier

!Local variables--------------
#if defined HAVE_MPI
 integer :: n1,n2,n3,n4,nproc_space_comm
 complex(spc),allocatable :: xsum(:,:,:,:)
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   call MPI_COMM_SIZE(comm,nproc_space_comm,ier)
   if (nproc_space_comm /= 1) then
!    Accumulate xval on all proc. in comm
     n1 =size(xval,dim=1)
     n2 =size(xval,dim=2)
     n3 =size(xval,dim=3)
     n4 =size(xval,dim=4)

#if defined HAVE_MPI2 && defined HAVE_MPI2_INPLACE
     call MPI_ALLREDUCE(MPI_IN_PLACE,xval,n1*n2*n3*n4,MPI_COMPLEX,MPI_SUM,comm,ier)
#else
     ABI_ALLOCATE(xsum,(n1,n2,n3,n4))
     if (ABI_ALLOC_STAT/= 0) then
       call xmpi_abort(comm=comm,msg='error allocating xsum in xmpi_sum_c4cplx')
     end if
     call MPI_ALLREDUCE(xval,xsum,n1*n2*n3*n4,MPI_COMPLEX,MPI_SUM,comm,ier)
     xval (:,:,:,:) = xsum(:,:,:,:)
     ABI_DEALLOCATE(xsum)
#endif

   end if
 end if
#endif

end subroutine xmpi_sum_c4cplx
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_sum_c5cplx
!! NAME
!!  xmpi_sum_c5cplx
!!
!! FUNCTION
!!  Combines values from all processes and distribute
!!  the result back to all processes.
!!  Target: five-dimensional complex arrays.
!!
!! INPUTS
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_allreduce,xmpi_abort
!!
!! SOURCE
subroutine xmpi_sum_c5cplx(xval,comm,ier)


 use defs_basis
 use m_profiling

!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_sum_c5cplx'
!End of the abilint section

 implicit none


!Arguments----------------
 complex(spc),intent(inout) :: xval(:,:,:,:,:)
 integer,intent(in) :: comm
 integer,intent(out)   :: ier

!Local variables--------------
#if defined HAVE_MPI
 integer :: n1,n2,n3,n4,n5,nproc_space_comm
 complex(spc),allocatable :: xsum(:,:,:,:,:)
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   call MPI_COMM_SIZE(comm,nproc_space_comm,ier)
   if (nproc_space_comm /= 1) then
!    Accumulate xval on all proc. in comm
     n1 =size(xval,dim=1)
     n2 =size(xval,dim=2)
     n3 =size(xval,dim=3)
     n4 =size(xval,dim=4)
     n5 =size(xval,dim=5)

#if defined HAVE_MPI2 && defined HAVE_MPI2_INPLACE
     call MPI_ALLREDUCE(MPI_IN_PLACE,xval,n1*n2*n3*n4*n5,MPI_COMPLEX,MPI_SUM,comm,ier)
#else
     ABI_ALLOCATE(xsum,(n1,n2,n3,n4,n5))
     if (ABI_ALLOC_STAT/= 0) then
       call xmpi_abort(comm=comm,msg='error allocating xsum in xmpi_sum_c5cplx')
     end if
     call MPI_ALLREDUCE(xval,xsum,n1*n2*n3*n4*n5,MPI_COMPLEX,MPI_SUM,comm,ier)
     xval (:,:,:,:,:) = xsum(:,:,:,:,:)
     ABI_DEALLOCATE(xsum)
#endif

   end if
 end if
#endif

end subroutine xmpi_sum_c5cplx
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_sum_c6cplx
!! NAME
!!  xmpi_sum_c6cplx
!!
!! FUNCTION
!!  Combines values from all processes and distribute the result back to all processes.
!!  Target: six-dimensional complex arrays.
!!
!! INPUTS
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_allreduce,xmpi_abort
!!
!! SOURCE

subroutine xmpi_sum_c6cplx(xval,comm,ier)


 use defs_basis
 use m_profiling

!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_sum_c6cplx'
!End of the abilint section

 implicit none


!Arguments----------------
 complex(spc),intent(inout) :: xval(:,:,:,:,:,:)
 integer,intent(in) :: comm
 integer,intent(out)   :: ier

!Local variables--------------
#if defined HAVE_MPI
 integer :: n1,n2,n3,n4,n5,n6,nproc_space_comm
 complex(spc),allocatable :: xsum(:,:,:,:,:,:)
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
   call MPI_COMM_SIZE(comm,nproc_space_comm,ier)
   if (nproc_space_comm /= 1) then
!    Accumulate xval on all proc. in comm
     n1 =size(xval,dim=1)
     n2 =size(xval,dim=2)
     n3 =size(xval,dim=3)
     n4 =size(xval,dim=4)
     n5 =size(xval,dim=5)
     n6 =size(xval,dim=6)

#if defined HAVE_MPI2 && defined HAVE_MPI2_INPLACE
     call MPI_ALLREDUCE(MPI_IN_PLACE,xval,n1*n2*n3*n4*n5*n6,MPI_COMPLEX,MPI_SUM,comm,ier)
#else
     ABI_ALLOCATE(xsum,(n1,n2,n3,n4,n5,n6))
     if (ABI_ALLOC_STAT/= 0) then
       call xmpi_abort(comm=comm,msg='error allocating xsum in xmpi_sum_c6cplx')
     end if
     call MPI_ALLREDUCE(xval,xsum,n1*n2*n3*n4*n5*n6,MPI_COMPLEX,MPI_SUM,comm,ier)
     xval = xsum
     ABI_DEALLOCATE(xsum)
#endif

   end if
 end if
#endif

end subroutine xmpi_sum_c6cplx
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_sum_log1d
!! NAME
!!  xmpi_sum_log1d
!!
!! FUNCTION
!!  Combines values from all processes and distribute
!!  the result back to all processes.
!!  Target: one-dimensional logical arrays.
!!
!! INPUTS
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_allreduce,xmpi_abort
!!
!! SOURCE
subroutine xmpi_sum_log1d(xval,comm,ier)


 use defs_basis
 use m_profiling

!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_sum_log1d'
!End of the abilint section

 implicit none


!Arguments ------------------------------------
 integer,intent(in) :: comm
 integer,intent(out)   :: ier
 logical,intent(inout) :: xval(:)

!Local variables-------------------------------
#if defined HAVE_MPI
 integer :: n1
 logical,allocatable :: xsum(:)
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
!  Accumulate xval on all proc. in comm
   n1 = size(xval)
   ABI_ALLOCATE(xsum,(n1))
   if (ABI_ALLOC_STAT/= 0) then
     call xmpi_abort(comm=comm,msg='error allocating xsum in xmpi_sum_log1d')
   end if
   call MPI_ALLREDUCE(xval,xsum,n1,MPI_LOGICAL,MPI_LOR,comm,ier)
   xval (:) = xsum(:)
   ABI_DEALLOCATE(xsum)
 end if
#endif

end subroutine xmpi_sum_log1d
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_sum_log2d
!! NAME
!!  xmpi_sum_log2d
!!
!! FUNCTION
!!  Combines values from all processes and distribute
!!  the result back to all processes.
!!  Target: two-dimensional logical arrays.
!!
!! INPUTS
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_allreduce,xmpi_abort
!!
!! SOURCE
subroutine xmpi_sum_log2d(xval,comm,ier)


 use defs_basis
 use m_profiling

!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_sum_log2d'
!End of the abilint section

 implicit none


!Arguments ------------------------------------
 integer,intent(in) :: comm
 integer,intent(out)   :: ier
 logical,intent(inout) :: xval(:,:)

!Local variables-------------------------------
#if defined HAVE_MPI
 integer :: n1,n2
 logical,allocatable :: xsum(:,:)
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
!  Accumulate xval on all proc. in comm
   n1 = size(xval,1)
   n2 = size(xval,2)
   ABI_ALLOCATE(xsum,(n1,n2))
   if (ABI_ALLOC_STAT/= 0) then
     call xmpi_abort(comm=comm,msg='error allocating xsum in xmpi_sum_log2d')
   end if
   call MPI_ALLREDUCE(xval,xsum,n1*n2,MPI_LOGICAL,MPI_LOR,comm,ier)
   xval (:,:) = xsum(:,:)
   ABI_DEALLOCATE(xsum)
 end if
#endif

end subroutine xmpi_sum_log2d
!!***

!----------------------------------------------------------------------

!!****f* ABINIT/xmpi_sum_log3d
!! NAME
!!  xmpi_sum_log3d
!!
!! FUNCTION
!!  Combines values from all processes and distribute
!!  the result back to all processes.
!!  Target: three-dimensional logical arrays.
!!
!! INPUTS
!!  comm= MPI communicator
!!
!! OUTPUT
!!  ier= exit status, a non-zero value meaning there is an error
!!
!! SIDE EFFECTS
!!  xval= buffer array
!!
!! PARENTS
!!
!! CHILDREN
!!      mpi_allreduce,xmpi_abort
!!
!! SOURCE
subroutine xmpi_sum_log3d(xval,comm,ier)

 use defs_basis
 use m_profiling

!This section has been created automatically by the script Abilint (TD).
!Do not modify the following lines by hand.
#undef ABI_FUNC
#define ABI_FUNC 'xmpi_sum_log3d'
!End of the abilint section

 implicit none


!Arguments ------------------------------------
 integer,intent(in) :: comm
 integer,intent(out)   :: ier
 logical,intent(inout) :: xval(:,:,:)

!Local variables-------------------------------
#if defined HAVE_MPI
 integer :: n1,n2,n3
 logical,allocatable :: xsum(:,:,:)
#endif

! *************************************************************************

 ier=0
#if defined HAVE_MPI
 if (comm /= MPI_COMM_SELF .and. comm /= MPI_COMM_NULL) then
!  Accumulate xval on all proc. in comm
   n1 = size(xval,1)
   n2 = size(xval,2)
   n3 = size(xval,3)

!  #if defined HAVE_MPI2 && defined HAVE_MPI2_INPLACE
!  call MPI_ALLREDUCE(MPI_IN_PLACE,xval,n1*n2*n3,MPI_LOGICAL,MPI_LOR,comm,ier)
!  #else
   ABI_ALLOCATE(xsum,(n1,n2,n3))
   if (ABI_ALLOC_STAT/= 0) then
     call xmpi_abort(comm=comm,msg='error allocating xsum in xmpi_sum_log3d')
   end if
   call MPI_ALLREDUCE(xval,xsum,n1*n2*n3,MPI_LOGICAL,MPI_LOR,comm,ier)
   xval (:,:,:) = xsum(:,:,:)
   ABI_DEALLOCATE(xsum)
!  #endif
 end if
#endif

end subroutine xmpi_sum_log3d
!!***
